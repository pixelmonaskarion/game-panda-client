// source: Networking/pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.pool.AuthedPlayer', null, global);
goog.exportSymbol('proto.pool.Ball', null, global);
goog.exportSymbol('proto.pool.GameState', null, global);
goog.exportSymbol('proto.pool.Move', null, global);
goog.exportSymbol('proto.pool.MoveType', null, global);
goog.exportSymbol('proto.pool.PlaceMove', null, global);
goog.exportSymbol('proto.pool.Player', null, global);
goog.exportSymbol('proto.pool.PlayerID', null, global);
goog.exportSymbol('proto.pool.Room', null, global);
goog.exportSymbol('proto.pool.RoomCreation', null, global);
goog.exportSymbol('proto.pool.RoomID', null, global);
goog.exportSymbol('proto.pool.RoomJoin', null, global);
goog.exportSymbol('proto.pool.StrikeMove', null, global);
goog.exportSymbol('proto.pool.Turn', null, global);
goog.exportSymbol('proto.pool.WinState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.RoomCreation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.RoomCreation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.RoomCreation.displayName = 'proto.pool.RoomCreation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.RoomJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.RoomJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.RoomJoin.displayName = 'proto.pool.RoomJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.RoomID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.RoomID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.RoomID.displayName = 'proto.pool.RoomID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.PlayerID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.PlayerID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.PlayerID.displayName = 'proto.pool.PlayerID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.Player.displayName = 'proto.pool.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.AuthedPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.AuthedPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.AuthedPlayer.displayName = 'proto.pool.AuthedPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.Room.repeatedFields_, null);
};
goog.inherits(proto.pool.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.Room.displayName = 'proto.pool.Room';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.Ball = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.Ball.repeatedFields_, null);
};
goog.inherits(proto.pool.Ball, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.Ball.displayName = 'proto.pool.Ball';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.GameState.repeatedFields_, null);
};
goog.inherits(proto.pool.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.GameState.displayName = 'proto.pool.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.Turn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.Turn.repeatedFields_, null);
};
goog.inherits(proto.pool.Turn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.Turn.displayName = 'proto.pool.Turn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.Move.displayName = 'proto.pool.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.StrikeMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.StrikeMove.repeatedFields_, null);
};
goog.inherits(proto.pool.StrikeMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.StrikeMove.displayName = 'proto.pool.StrikeMove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.PlaceMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pool.PlaceMove.repeatedFields_, null);
};
goog.inherits(proto.pool.PlaceMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.PlaceMove.displayName = 'proto.pool.PlaceMove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pool.WinState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pool.WinState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pool.WinState.displayName = 'proto.pool.WinState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.RoomCreation.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.RoomCreation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.RoomCreation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomCreation.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: (f = msg.getRoomId()) && proto.pool.RoomID.toObject(includeInstance, f),
    playerToken: (f = msg.getPlayerToken()) && proto.pool.PlayerID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.RoomCreation}
 */
proto.pool.RoomCreation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.RoomCreation;
  return proto.pool.RoomCreation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.RoomCreation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.RoomCreation}
 */
proto.pool.RoomCreation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.RoomID;
      reader.readMessage(value,proto.pool.RoomID.deserializeBinaryFromReader);
      msg.setRoomId(value);
      break;
    case 2:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.setPlayerToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.RoomCreation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.RoomCreation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.RoomCreation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomCreation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pool.RoomID.serializeBinaryToWriter
    );
  }
  f = message.getPlayerToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
};


/**
 * optional RoomID room_id = 1;
 * @return {?proto.pool.RoomID}
 */
proto.pool.RoomCreation.prototype.getRoomId = function() {
  return /** @type{?proto.pool.RoomID} */ (
    jspb.Message.getWrapperField(this, proto.pool.RoomID, 1));
};


/**
 * @param {?proto.pool.RoomID|undefined} value
 * @return {!proto.pool.RoomCreation} returns this
*/
proto.pool.RoomCreation.prototype.setRoomId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.RoomCreation} returns this
 */
proto.pool.RoomCreation.prototype.clearRoomId = function() {
  return this.setRoomId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.RoomCreation.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerID player_token = 2;
 * @return {?proto.pool.PlayerID}
 */
proto.pool.RoomCreation.prototype.getPlayerToken = function() {
  return /** @type{?proto.pool.PlayerID} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlayerID, 2));
};


/**
 * @param {?proto.pool.PlayerID|undefined} value
 * @return {!proto.pool.RoomCreation} returns this
*/
proto.pool.RoomCreation.prototype.setPlayerToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.RoomCreation} returns this
 */
proto.pool.RoomCreation.prototype.clearPlayerToken = function() {
  return this.setPlayerToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.RoomCreation.prototype.hasPlayerToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.RoomJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.RoomJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.RoomJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerToken: (f = msg.getPlayerToken()) && proto.pool.PlayerID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.RoomJoin}
 */
proto.pool.RoomJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.RoomJoin;
  return proto.pool.RoomJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.RoomJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.RoomJoin}
 */
proto.pool.RoomJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.setPlayerToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.RoomJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.RoomJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.RoomJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerID player_token = 1;
 * @return {?proto.pool.PlayerID}
 */
proto.pool.RoomJoin.prototype.getPlayerToken = function() {
  return /** @type{?proto.pool.PlayerID} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlayerID, 1));
};


/**
 * @param {?proto.pool.PlayerID|undefined} value
 * @return {!proto.pool.RoomJoin} returns this
*/
proto.pool.RoomJoin.prototype.setPlayerToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.RoomJoin} returns this
 */
proto.pool.RoomJoin.prototype.clearPlayerToken = function() {
  return this.setPlayerToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.RoomJoin.prototype.hasPlayerToken = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.RoomID.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.RoomID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.RoomID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomID.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomCode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.RoomID}
 */
proto.pool.RoomID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.RoomID;
  return proto.pool.RoomID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.RoomID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.RoomID}
 */
proto.pool.RoomID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.RoomID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.RoomID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.RoomID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.RoomID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_code = 1;
 * @return {string}
 */
proto.pool.RoomID.prototype.getRoomCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.RoomID} returns this
 */
proto.pool.RoomID.prototype.setRoomCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.PlayerID.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.PlayerID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.PlayerID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.PlayerID.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.PlayerID}
 */
proto.pool.PlayerID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.PlayerID;
  return proto.pool.PlayerID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.PlayerID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.PlayerID}
 */
proto.pool.PlayerID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.PlayerID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.PlayerID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.PlayerID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.PlayerID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_token = 1;
 * @return {string}
 */
proto.pool.PlayerID.prototype.getPlayerToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.PlayerID} returns this
 */
proto.pool.PlayerID.prototype.setPlayerToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: (f = msg.getPlayerId()) && proto.pool.PlayerID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.Player}
 */
proto.pool.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.Player;
  return proto.pool.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.Player}
 */
proto.pool.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PlayerID player_id = 1;
 * @return {?proto.pool.PlayerID}
 */
proto.pool.Player.prototype.getPlayerId = function() {
  return /** @type{?proto.pool.PlayerID} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlayerID, 1));
};


/**
 * @param {?proto.pool.PlayerID|undefined} value
 * @return {!proto.pool.Player} returns this
*/
proto.pool.Player.prototype.setPlayerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Player} returns this
 */
proto.pool.Player.prototype.clearPlayerId = function() {
  return this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Player.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pool.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.Player} returns this
 */
proto.pool.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.AuthedPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.AuthedPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.AuthedPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.AuthedPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: (f = msg.getPlayerId()) && proto.pool.PlayerID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playerToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.AuthedPlayer}
 */
proto.pool.AuthedPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.AuthedPlayer;
  return proto.pool.AuthedPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.AuthedPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.AuthedPlayer}
 */
proto.pool.AuthedPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.AuthedPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.AuthedPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.AuthedPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.AuthedPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional PlayerID player_id = 1;
 * @return {?proto.pool.PlayerID}
 */
proto.pool.AuthedPlayer.prototype.getPlayerId = function() {
  return /** @type{?proto.pool.PlayerID} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlayerID, 1));
};


/**
 * @param {?proto.pool.PlayerID|undefined} value
 * @return {!proto.pool.AuthedPlayer} returns this
*/
proto.pool.AuthedPlayer.prototype.setPlayerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.AuthedPlayer} returns this
 */
proto.pool.AuthedPlayer.prototype.clearPlayerId = function() {
  return this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.AuthedPlayer.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pool.AuthedPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.AuthedPlayer} returns this
 */
proto.pool.AuthedPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string player_token = 3;
 * @return {string}
 */
proto.pool.AuthedPlayer.prototype.getPlayerToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.AuthedPlayer} returns this
 */
proto.pool.AuthedPlayer.prototype.setPlayerToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.Room.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: (f = msg.getRoomId()) && proto.pool.RoomID.toObject(includeInstance, f),
    roomName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.pool.PlayerID.toObject, includeInstance),
    gameStarted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.Room}
 */
proto.pool.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.Room;
  return proto.pool.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.Room}
 */
proto.pool.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.RoomID;
      reader.readMessage(value,proto.pool.RoomID.deserializeBinaryFromReader);
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 3:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGameStarted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pool.RoomID.serializeBinaryToWriter
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
  f = message.getGameStarted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional RoomID room_id = 1;
 * @return {?proto.pool.RoomID}
 */
proto.pool.Room.prototype.getRoomId = function() {
  return /** @type{?proto.pool.RoomID} */ (
    jspb.Message.getWrapperField(this, proto.pool.RoomID, 1));
};


/**
 * @param {?proto.pool.RoomID|undefined} value
 * @return {!proto.pool.Room} returns this
*/
proto.pool.Room.prototype.setRoomId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Room} returns this
 */
proto.pool.Room.prototype.clearRoomId = function() {
  return this.setRoomId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Room.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string room_name = 2;
 * @return {string}
 */
proto.pool.Room.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pool.Room} returns this
 */
proto.pool.Room.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PlayerID players = 3;
 * @return {!Array<!proto.pool.PlayerID>}
 */
proto.pool.Room.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.pool.PlayerID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pool.PlayerID, 3));
};


/**
 * @param {!Array<!proto.pool.PlayerID>} value
 * @return {!proto.pool.Room} returns this
*/
proto.pool.Room.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pool.PlayerID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pool.PlayerID}
 */
proto.pool.Room.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pool.PlayerID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.Room} returns this
 */
proto.pool.Room.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional bool game_started = 4;
 * @return {boolean}
 */
proto.pool.Room.prototype.getGameStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pool.Room} returns this
 */
proto.pool.Room.prototype.setGameStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.Ball.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.Ball.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.Ball.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.Ball} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Ball.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    velList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    inPlay: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.Ball}
 */
proto.pool.Ball.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.Ball;
  return proto.pool.Ball.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.Ball} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.Ball}
 */
proto.pool.Ball.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPos(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVel(values[i]);
      }
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInPlay(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.Ball.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.Ball.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.Ball} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Ball.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getVelList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getInPlay();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated float pos = 1;
 * @return {!Array<number>}
 */
proto.pool.Ball.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.clearPosList = function() {
  return this.setPosList([]);
};


/**
 * repeated float vel = 2;
 * @return {!Array<number>}
 */
proto.pool.Ball.prototype.getVelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.setVelList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.addVel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.clearVelList = function() {
  return this.setVelList([]);
};


/**
 * optional bool in_play = 3;
 * @return {boolean}
 */
proto.pool.Ball.prototype.getInPlay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.setInPlay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 index = 4;
 * @return {number}
 */
proto.pool.Ball.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pool.Ball} returns this
 */
proto.pool.Ball.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.GameState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    ballsList: jspb.Message.toObjectList(msg.getBallsList(),
    proto.pool.Ball.toObject, includeInstance),
    scoresList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    p1Solid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    p1Turn: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.GameState}
 */
proto.pool.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.GameState;
  return proto.pool.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.GameState}
 */
proto.pool.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.Ball;
      reader.readMessage(value,proto.pool.Ball.deserializeBinaryFromReader);
      msg.addBalls(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScores(values[i]);
      }
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setP1Solid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setP1Turn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pool.Ball.serializeBinaryToWriter
    );
  }
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getP1Solid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getP1Turn();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated Ball balls = 1;
 * @return {!Array<!proto.pool.Ball>}
 */
proto.pool.GameState.prototype.getBallsList = function() {
  return /** @type{!Array<!proto.pool.Ball>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pool.Ball, 1));
};


/**
 * @param {!Array<!proto.pool.Ball>} value
 * @return {!proto.pool.GameState} returns this
*/
proto.pool.GameState.prototype.setBallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pool.Ball=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pool.Ball}
 */
proto.pool.GameState.prototype.addBalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pool.Ball, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.clearBallsList = function() {
  return this.setBallsList([]);
};


/**
 * repeated int32 scores = 2;
 * @return {!Array<number>}
 */
proto.pool.GameState.prototype.getScoresList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.setScoresList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.addScores = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.clearScoresList = function() {
  return this.setScoresList([]);
};


/**
 * optional int32 p1_solid = 3;
 * @return {number}
 */
proto.pool.GameState.prototype.getP1Solid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.setP1Solid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool p1_turn = 4;
 * @return {boolean}
 */
proto.pool.GameState.prototype.getP1Turn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pool.GameState} returns this
 */
proto.pool.GameState.prototype.setP1Turn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.Turn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.Turn.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.Turn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.Turn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Turn.toObject = function(includeInstance, msg) {
  var f, obj = {
    movesList: jspb.Message.toObjectList(msg.getMovesList(),
    proto.pool.Move.toObject, includeInstance),
    roomId: (f = msg.getRoomId()) && proto.pool.RoomID.toObject(includeInstance, f),
    playerId: (f = msg.getPlayerId()) && proto.pool.PlayerID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.Turn}
 */
proto.pool.Turn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.Turn;
  return proto.pool.Turn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.Turn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.Turn}
 */
proto.pool.Turn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pool.Move;
      reader.readMessage(value,proto.pool.Move.deserializeBinaryFromReader);
      msg.addMoves(value);
      break;
    case 2:
      var value = new proto.pool.RoomID;
      reader.readMessage(value,proto.pool.RoomID.deserializeBinaryFromReader);
      msg.setRoomId(value);
      break;
    case 3:
      var value = new proto.pool.PlayerID;
      reader.readMessage(value,proto.pool.PlayerID.deserializeBinaryFromReader);
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.Turn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.Turn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.Turn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Turn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pool.Move.serializeBinaryToWriter
    );
  }
  f = message.getRoomId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pool.RoomID.serializeBinaryToWriter
    );
  }
  f = message.getPlayerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pool.PlayerID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Move moves = 1;
 * @return {!Array<!proto.pool.Move>}
 */
proto.pool.Turn.prototype.getMovesList = function() {
  return /** @type{!Array<!proto.pool.Move>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pool.Move, 1));
};


/**
 * @param {!Array<!proto.pool.Move>} value
 * @return {!proto.pool.Turn} returns this
*/
proto.pool.Turn.prototype.setMovesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pool.Move=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pool.Move}
 */
proto.pool.Turn.prototype.addMoves = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pool.Move, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.Turn} returns this
 */
proto.pool.Turn.prototype.clearMovesList = function() {
  return this.setMovesList([]);
};


/**
 * optional RoomID room_id = 2;
 * @return {?proto.pool.RoomID}
 */
proto.pool.Turn.prototype.getRoomId = function() {
  return /** @type{?proto.pool.RoomID} */ (
    jspb.Message.getWrapperField(this, proto.pool.RoomID, 2));
};


/**
 * @param {?proto.pool.RoomID|undefined} value
 * @return {!proto.pool.Turn} returns this
*/
proto.pool.Turn.prototype.setRoomId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Turn} returns this
 */
proto.pool.Turn.prototype.clearRoomId = function() {
  return this.setRoomId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Turn.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlayerID player_id = 3;
 * @return {?proto.pool.PlayerID}
 */
proto.pool.Turn.prototype.getPlayerId = function() {
  return /** @type{?proto.pool.PlayerID} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlayerID, 3));
};


/**
 * @param {?proto.pool.PlayerID|undefined} value
 * @return {!proto.pool.Turn} returns this
*/
proto.pool.Turn.prototype.setPlayerId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Turn} returns this
 */
proto.pool.Turn.prototype.clearPlayerId = function() {
  return this.setPlayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Turn.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    strikeMove: (f = msg.getStrikeMove()) && proto.pool.StrikeMove.toObject(includeInstance, f),
    placeMove: (f = msg.getPlaceMove()) && proto.pool.PlaceMove.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.Move}
 */
proto.pool.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.Move;
  return proto.pool.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.Move}
 */
proto.pool.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pool.MoveType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.pool.StrikeMove;
      reader.readMessage(value,proto.pool.StrikeMove.deserializeBinaryFromReader);
      msg.setStrikeMove(value);
      break;
    case 3:
      var value = new proto.pool.PlaceMove;
      reader.readMessage(value,proto.pool.PlaceMove.deserializeBinaryFromReader);
      msg.setPlaceMove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStrikeMove();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pool.StrikeMove.serializeBinaryToWriter
    );
  }
  f = message.getPlaceMove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pool.PlaceMove.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoveType type = 1;
 * @return {!proto.pool.MoveType}
 */
proto.pool.Move.prototype.getType = function() {
  return /** @type {!proto.pool.MoveType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pool.MoveType} value
 * @return {!proto.pool.Move} returns this
 */
proto.pool.Move.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional StrikeMove strike_move = 2;
 * @return {?proto.pool.StrikeMove}
 */
proto.pool.Move.prototype.getStrikeMove = function() {
  return /** @type{?proto.pool.StrikeMove} */ (
    jspb.Message.getWrapperField(this, proto.pool.StrikeMove, 2));
};


/**
 * @param {?proto.pool.StrikeMove|undefined} value
 * @return {!proto.pool.Move} returns this
*/
proto.pool.Move.prototype.setStrikeMove = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Move} returns this
 */
proto.pool.Move.prototype.clearStrikeMove = function() {
  return this.setStrikeMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Move.prototype.hasStrikeMove = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlaceMove place_move = 3;
 * @return {?proto.pool.PlaceMove}
 */
proto.pool.Move.prototype.getPlaceMove = function() {
  return /** @type{?proto.pool.PlaceMove} */ (
    jspb.Message.getWrapperField(this, proto.pool.PlaceMove, 3));
};


/**
 * @param {?proto.pool.PlaceMove|undefined} value
 * @return {!proto.pool.Move} returns this
*/
proto.pool.Move.prototype.setPlaceMove = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pool.Move} returns this
 */
proto.pool.Move.prototype.clearPlaceMove = function() {
  return this.setPlaceMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pool.Move.prototype.hasPlaceMove = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.StrikeMove.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.StrikeMove.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.StrikeMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.StrikeMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.StrikeMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    velList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.StrikeMove}
 */
proto.pool.StrikeMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.StrikeMove;
  return proto.pool.StrikeMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.StrikeMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.StrikeMove}
 */
proto.pool.StrikeMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVel(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.StrikeMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.StrikeMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.StrikeMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.StrikeMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVelList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float vel = 1;
 * @return {!Array<number>}
 */
proto.pool.StrikeMove.prototype.getVelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pool.StrikeMove} returns this
 */
proto.pool.StrikeMove.prototype.setVelList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pool.StrikeMove} returns this
 */
proto.pool.StrikeMove.prototype.addVel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.StrikeMove} returns this
 */
proto.pool.StrikeMove.prototype.clearVelList = function() {
  return this.setVelList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pool.PlaceMove.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.PlaceMove.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.PlaceMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.PlaceMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.PlaceMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.PlaceMove}
 */
proto.pool.PlaceMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.PlaceMove;
  return proto.pool.PlaceMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.PlaceMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.PlaceMove}
 */
proto.pool.PlaceMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPos(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.PlaceMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.PlaceMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.PlaceMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.PlaceMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float pos = 1;
 * @return {!Array<number>}
 */
proto.pool.PlaceMove.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pool.PlaceMove} returns this
 */
proto.pool.PlaceMove.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pool.PlaceMove} returns this
 */
proto.pool.PlaceMove.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pool.PlaceMove} returns this
 */
proto.pool.PlaceMove.prototype.clearPosList = function() {
  return this.setPosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pool.WinState.prototype.toObject = function(opt_includeInstance) {
  return proto.pool.WinState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pool.WinState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.WinState.toObject = function(includeInstance, msg) {
  var f, obj = {
    winState: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pool.WinState}
 */
proto.pool.WinState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pool.WinState;
  return proto.pool.WinState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pool.WinState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pool.WinState}
 */
proto.pool.WinState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pool.WinState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pool.WinState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pool.WinState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pool.WinState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinState();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 win_state = 1;
 * @return {number}
 */
proto.pool.WinState.prototype.getWinState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pool.WinState} returns this
 */
proto.pool.WinState.prototype.setWinState = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.pool.MoveType = {
  STRIKE: 0,
  PLACE: 1
};

goog.object.extend(exports, proto.pool);
